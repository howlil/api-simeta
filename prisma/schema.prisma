generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mahasiswa {
  id         String     @id @default(uuid())
  full_name  String
  email      String     @unique
  nim        String
  photoUrl   String?
  password   String
  token      Token[]
  reminder   Reminder[]
  ta         TA?        @relation()
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model TA {
  id            String         @id @default(uuid())
  title         String
  description   String
  max_logbook   Int            @default(20)
  logbook       Logbook[]
  subject_study Subject_Study? @relation()
  dospem        Dospem[]
  milestone     Milestone[]
  proposal      Proposal[]
  pengajuan_TA  Pengajuan_TA[]
  mahasiswa_id  String         @unique
  mahasiswa     Mahasiswa      @relation(fields: [mahasiswa_id], references: [id])
  semhas        Semhas[]
  sidang        Sidang[]
  bimbingan_TA  Bimbingan_TA[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
}

model Bimbingan_TA {
  id         String    @id @default(uuid())
  tanggal    String
  aktifitas  String
  status     String
  TA         TA?       @relation(fields: [ta_id], references: [id])
  ta_id      String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Pengajuan_TA {
  id         String    @id @default(uuid())
  bukti1     String
  bukti2     String
  bukti3     String
  status     String
  TA         TA?       @relation(fields: [ta_id], references: [id])
  ta_id      String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Semhas {
  id         String    @id @default(uuid())
  tanggal    String
  jam        String
  dokumen    String
  status     String
  TA         TA?       @relation(fields: [ta_id], references: [id])
  ta_id      String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Sidang {
  id         String    @id @default(uuid())
  tanggal    String
  jam        String
  dokumen    String
  status     String
  TA         TA?       @relation(fields: [ta_id], references: [id])
  ta_id      String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Proposal {
  id         String    @id @default(uuid())
  draft      String
  TA         TA?       @relation(fields: [ta_id], references: [id])
  ta_id      String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Milestone {
  id                String                  @id @default(uuid())
  name              String
  description       String
  status            String
  max_point         Int
  progress_Milestone Progress_Milestone_TA[]
  ta_id             String
  ta                TA                      @relation(fields: [ta_id], references: [id])
  created_at        DateTime                @default(now())
  updated_at        DateTime                @updatedAt
}

model Progress_Milestone_TA {
  milestone_id   String
  progress_ta_id String
  point          Int
  milestone      Milestone   @relation(fields: [milestone_id], references: [id])
  progress_ta    Progress_TA @relation(fields: [progress_ta_id], references: [id])

  @@id([milestone_id, progress_ta_id])
}

model Progress_TA {
  id                String                  @id @default(uuid())
  title             String
  details           String                  @db.Text
  progress_Milestone Progress_Milestone_TA[]
  created_at        DateTime                @default(now())
  updated_at        DateTime                @updatedAt
}

model Subject_Study {
  id           String         @id @default(uuid())
  subject      String
  ta_id        String?        @unique
  ta           TA?            @relation(fields: [ta_id], references: [id])
  bidang_dosen Bidang_Dosen[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
}

model Dospem {
  dosen_id     String
  ta_id        String
  dosen        Dosen  @relation(fields: [dosen_id], references: [id])
  ta           TA     @relation(fields: [ta_id], references: [id])
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@id([dosen_id, ta_id])
}

model Dosen {
  id           String         @id @default(uuid())
  full_name    String
  nip          String
  position     String
  bidang_dosen Bidang_Dosen[]
  dospem       Dospem[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
}

model Bidang_Dosen {
  dosen_id         String
  subject_study_id String
  dosen            Dosen         @relation(fields: [dosen_id], references: [id])
  subject_study    Subject_Study @relation(fields: [subject_study_id], references: [id])
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  @@id([dosen_id, subject_study_id])
}

model Logbook {
  id             String @id @default(uuid())
  date           String
  activity       String @db.Text
  notes          String @db.Text
  attachment_url String
  ta_id          String
  ta             TA     @relation(fields: [ta_id], references: [id])
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Reminder {
  id           String    @id @default(uuid())
  title        String
  message      String
  due_date     String
  mahasiswa_id String
  mahasiswa    Mahasiswa @relation(fields: [mahasiswa_id], references: [id])
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model Token {
  id           String    @id @default(uuid())
  token        String    @db.Text
  mahasiswa_id String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  mahasiswa    Mahasiswa @relation(fields: [mahasiswa_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
