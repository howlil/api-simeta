

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mahasiswa {
    id String @id @default(uuid())
    full_name String
    email String
    nim String    
    photoUrl  String?
    password String    
    token Token[]
    reminder Reminder[]
    ta TA? @relation()
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
} 

model TA {
      id String @id @default(uuid())  
      title String
      description String
      logbook Logbook[]
      subject_study Subject_Study? @relation()
      dospem Dospem[]
      milestone Milestone[]
      mahasiswa_id String @unique
      mahasiswa Mahasiswa @relation(fields: [mahasiswa_id],references: [id])
}

model Milestone {
      id String @id @default(uuid())  
      name String
      description String
      status String
      ta_id String
      progress_TA Progress_TA[]
      ta TA @relation(fields: [ta_id],references: [id])
}

model Progress_TA {
      id String @id @default(uuid())  
      title String
      details String @db.Text
      milestone_id String
      milestone Milestone @relation(fields: [milestone_id],references: [id])
}

model Subject_Study {
      id String @id @default(uuid())  
      subject String
      ta_id String? @unique
      ta TA? @relation(fields: [ta_id],references: [id])
      bidang_dosen Bidang_Dosen[]
}

model Dospem {
  dosen_id String
  ta_id String
  dosen Dosen @relation(fields: [dosen_id] ,references: [id])
  ta TA @relation(fields: [ta_id],references: [id])
  @@id([dosen_id,ta_id])
}

model Dosen {
    id String @id @default(uuid())  
    full_name String 
    nip String
    postion String   
    bidang_dosen Bidang_Dosen[] 
    dospem Dospem[]

}

model Bidang_Dosen{
  dosen_id String
  subject_study_id String
  dosen Dosen @relation(fields: [dosen_id],references: [id])
  subject_study Subject_Study @relation(fields: [subject_study_id],references: [id])

  @@id([dosen_id,subject_study_id])
}

model Logbook {
      id String @id @default(uuid())  
      date String
      activity String @db.Text
      notes String @db.Text
      attachment_url String 
      ta_id String
      ta TA @relation(fields: [ta_id],references: [id])
}

model Reminder {
    id String @id @default(uuid())
    title String
    message String
    due_date String
    mahasiswa_id String 
    mahasiswa Mahasiswa @relation(fields: [mahasiswa_id],references: [id])

}


model Token {
  id String @id @default(uuid())
  token String @db.Text
  mahasiswa_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  mahasiswa Mahasiswa  @relation(fields: [mahasiswa_id],references: [id], onDelete: Cascade,onUpdate: Cascade)
}

model Jadwal_Bimbingan {
  id          String    @id @default(uuid())
  ta_id       String
  dosen_id    String
  date        DateTime
  time        String
  location    String
  topic       String
  status      String    @default("pending")
  notes       String?
  createdAt   DateTime  @default(now())
  ta          TA        @relation(fields: [ta_id], references: [id])
  dosen       Dosen     @relation(fields: [dosen_id], references: [id])
}

model Timeline_Aktifitas {
  id          String    @id @default(uuid())
  ta_id       String
  activityType String   // proposal, research, writing, seminar, revision, defense
  description String
  date        DateTime
  status      String    @default("planned")
  attachments Json?     // Array of {fileName, fileUrl, uploadDate}
  createdAt   DateTime  @default(now())
  ta          TA        @relation(fields: [ta_id], references: [id])
}

model Status_TA {
  id          String    @id @default(uuid())
  ta_id       String    @unique
  dosen_id    String
  title       String
  currentPhase String
  progress    Int       @default(0)
  startDate   DateTime
  targetDate  DateTime?
  lastUpdate  DateTime  @default(now())
  notes       String?
  ta          TA        @relation(fields: [ta_id], references: [id])
  dosen       Dosen     @relation(fields: [dosen_id], references: [id])
}

model Dokumen_TA {
  id          String    @id @default(uuid())
  ta_id       String
  dosen_id    String
  documentType String
  title       String
  version     String
  fileUrl     String
  uploadDate  DateTime  @default(now())
  status      String    @default("draft")
  comments    Json?     // Array of {userId, content, date}
  ta          TA        @relation(fields: [ta_id], references: [id])
  dosen       Dosen     @relation(fields: [dosen_id], references: [id])
}


